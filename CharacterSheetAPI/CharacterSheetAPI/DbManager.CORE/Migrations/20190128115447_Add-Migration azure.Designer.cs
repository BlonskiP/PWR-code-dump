// <auto-generated />
using System;
using DbManager.CORE;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DbManager.CORE.Migrations
{
    [DbContext(typeof(DbCharacterContext))]
    [Migration("20190128115447_Add-Migration azure")]
    partial class AddMigrationazure
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DbManager.CORE.Models.ApiKeys", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Apikey")
                        .HasColumnName("APIKEY")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("AspUserIdFk")
                        .IsRequired()
                        .HasColumnName("Asp_User_id_FK")
                        .HasMaxLength(450);

                    b.Property<string>("AspUserIdFkNavigationId");

                    b.Property<int>("EventId")
                        .HasColumnName("Event_id");

                    b.HasKey("Id");

                    b.HasIndex("Apikey")
                        .IsUnique()
                        .HasName("APIKEY_UC")
                        .HasFilter("[APIKEY] IS NOT NULL");

                    b.HasIndex("AspUserIdFkNavigationId");

                    b.HasIndex("EventId");

                    b.ToTable("API_KEYS");
                });

            modelBuilder.Entity("DbManager.CORE.Models.AspUserEvent", b =>
                {
                    b.Property<int>("AspUserEventId")
                        .HasColumnName("ASP_USER_EVENT_Id");

                    b.Property<string>("AspUserIdFk")
                        .IsRequired()
                        .HasColumnName("Asp_User_id_FK")
                        .HasMaxLength(450);

                    b.Property<string>("AspUserIdFkNavigationId");

                    b.Property<int>("EventIdFk")
                        .HasColumnName("Event_id_FK");

                    b.HasKey("AspUserEventId");

                    b.HasIndex("AspUserIdFkNavigationId");

                    b.HasIndex("EventIdFk");

                    b.ToTable("ASP_USER_EVENT");
                });

            modelBuilder.Entity("DbManager.CORE.Models.CharactersSheets", b =>
                {
                    b.Property<int>("SheetId")
                        .HasColumnName("Sheet_id");

                    b.Property<bool?>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("approved")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<int?>("EventIdFk")
                        .HasColumnName("Event_id_FK");

                    b.Property<int?>("Money")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("PlayerIdFk")
                        .HasColumnName("Player_id_FK");

                    b.HasKey("SheetId");

                    b.HasIndex("EventIdFk");

                    b.HasIndex("PlayerIdFk");

                    b.ToTable("CHARACTERS_SHEETS");
                });

            modelBuilder.Entity("DbManager.CORE.Models.EventsTable", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnName("Event_id");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnName("event_date")
                        .HasColumnType("date");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnName("event_Description")
                        .HasMaxLength(2047)
                        .IsUnicode(false);

                    b.Property<string>("EventTitle")
                        .HasColumnName("event_Title")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Place")
                        .HasColumnName("place")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("EventId");

                    b.ToTable("EVENTS_TABLE");
                });

            modelBuilder.Entity("DbManager.CORE.Models.Players", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("Player_id");

                    b.Property<string>("AspUserIdFk")
                        .IsRequired()
                        .HasColumnName("Asp_User_id_FK")
                        .HasMaxLength(450);

                    b.Property<string>("AspUserIdFkNavigationId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("PlayerId");

                    b.HasIndex("AspUserIdFkNavigationId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("EMAIL_UC");

                    b.ToTable("PLAYERS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DbManager.CORE.Models.ApiKeys", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspUserIdFkNavigation")
                        .WithMany()
                        .HasForeignKey("AspUserIdFkNavigationId");

                    b.HasOne("DbManager.CORE.Models.EventsTable", "Event")
                        .WithMany("ApiKeys")
                        .HasForeignKey("EventId")
                        .HasConstraintName("API_KEY_EVENT_FK");
                });

            modelBuilder.Entity("DbManager.CORE.Models.AspUserEvent", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspUserIdFkNavigation")
                        .WithMany()
                        .HasForeignKey("AspUserIdFkNavigationId");

                    b.HasOne("DbManager.CORE.Models.EventsTable", "EventIdFkNavigation")
                        .WithMany("AspUserEvent")
                        .HasForeignKey("EventIdFk")
                        .HasConstraintName("EVENT_FK");
                });

            modelBuilder.Entity("DbManager.CORE.Models.CharactersSheets", b =>
                {
                    b.HasOne("DbManager.CORE.Models.EventsTable", "EventIdFkNavigation")
                        .WithMany("CharactersSheets")
                        .HasForeignKey("EventIdFk")
                        .HasConstraintName("EVENT_CHARACTER_SHEET_FK");

                    b.HasOne("DbManager.CORE.Models.Players", "PlayerIdFkNavigation")
                        .WithMany("CharactersSheets")
                        .HasForeignKey("PlayerIdFk")
                        .HasConstraintName("Event_Player_FK");
                });

            modelBuilder.Entity("DbManager.CORE.Models.Players", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspUserIdFkNavigation")
                        .WithMany()
                        .HasForeignKey("AspUserIdFkNavigationId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
